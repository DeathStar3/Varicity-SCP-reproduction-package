import { Driver } from "neo4j-driver";
import { Node, Record } from "neo4j-driver-core";
import { Configuration } from "../configuration/Configuration";
import { EntityAttribut, EntityType, NodeType, RelationType } from "./NodeType";
export default class NeoGraph {
    driver: Driver;
    constructor(config: Configuration);
    createNode(name: string, type: NodeType, types: NodeType[]): Promise<Node>;
    createNodeWithPath(name: string, path: string, type: NodeType, types: NodeType[]): Promise<Node>;
    changeInternalLinkToExport(name: string, path: string): Promise<void>;
    getOrCreateNode(name: string, type: EntityType, createAttributes: EntityAttribut[], matchAttributes: EntityAttribut[]): Promise<Node>;
    getOrCreateNodeWithPath(name: string, path: string, type: EntityType, createAttributes: EntityAttribut[], matchAttributes: EntityAttribut[]): Promise<Node>;
    getNode(name: string): Promise<Node | undefined>;
    getAllNodes(path: string, relationship: RelationType): Promise<Node[]>;
    getNodeWithFile(name: string, path: string): Promise<Node | undefined>;
    getElementNodeWithFile(name: string, type: EntityType, path: string): Promise<Node | undefined>;
    getClassNodeWithPath(className: string, path: string): Promise<Node | undefined>;
    getClassNodeByModuleIfUnique(className: string, moduleName: string): Promise<Node | undefined>;
    getClassNodeByModule(className: string, moduleName: string, path: string): Promise<Node | undefined>;
    getNodeWithPath(name: string, path: string): Promise<Node | undefined>;
    getNodeWithType(name: string, type: EntityType): Promise<Node | undefined>;
    getClassNodeWithImport(className: string, filePath: string): Promise<Node | undefined>;
    getClassNodeIfUnique(className: string): Promise<Node | undefined>;
    getNodeByClass(name: string, filePath: string): Promise<Node<import("neo4j-driver-core/types/integer").default, {
        [key: string]: any;
    }> | undefined>;
    linkTwoNodes(node1: Node, node2: Node, type: RelationType): Promise<void>;
    linkTwoNodesWithCodeDuplicated(node1: Node, node2: Node, type: RelationType, percent: string, lines: string): Promise<void>;
    updateLinkTwoNode(node1: Node, node2: Node, oldType: RelationType, newType: RelationType): Promise<void>;
    setAlternativeName(fileNode: Node, node: Node, name: string): Promise<Node | undefined>;
    getNbVariant(node: Node): Promise<number>;
    addLabelToNode(node: Node, label: string): Promise<void>;
    detectVPsAndVariants(): Promise<void>;
    setMethodVPs(): Promise<void>;
    setMethodVariants(): Promise<void>;
    setConstructorVPs(): Promise<void>;
    setConstructorVariants(): Promise<void>;
    setNbVariantsProperty(): Promise<void>;
    setVPLabels(): Promise<void>;
    setMethodLevelVPLabels(): Promise<void>;
    setVariantsLabels(): Promise<void>;
    setPublicMethods(): Promise<void>;
    setPublicConstructors(): Promise<void>;
    setNbCompositions(): Promise<void>;
    setAllMethods(): Promise<void>;
    setProximityFolder(): Promise<void>;
    detectStrategiesWithComposition(): Promise<void>;
    detectDensity(): Promise<void>;
    getTotalNbVPs(): Promise<number>;
    getNbClassLevelVPs(): Promise<number>;
    getNbMethodLevelVPs(): Promise<number>;
    getNbMethodVPs(): Promise<number>;
    getNbConstructorVPs(): Promise<number>;
    getTotalNbVariants(): Promise<number>;
    getNbClassLevelVariants(): Promise<number>;
    getNbMethodLevelVariants(): Promise<number>;
    getNbMethodVariants(): Promise<number>;
    getNbConstructorVariants(): Promise<number>;
    getNbNodes(): Promise<number>;
    getNbRelationships(): Promise<number>;
    getNbVPFolders(): Promise<number>;
    getNbVariantFolders(): Promise<number>;
    getNbVariantFiles(): Promise<number>;
    getNbCoreFiles(): Promise<number>;
    getNbProximityEntity(): Promise<number>;
    getAllVariantFiles(): Promise<Node[]>;
    getAllFiles(): Promise<Node[]>;
    getAllClass(): Promise<Node[]>;
    getNbExportRelationships(): Promise<number>;
    getAllVPFoldersPath(): Promise<string[]>;
    getFoldersPathForVPFolderPath(vpFolderPath: string): Promise<string[]>;
    getVariantFilesNameForVPFolderPath(vpFolderPath: string): Promise<string[]>;
    getVariantFilesForVPFolderPath(vpFolderPath: string, variantFileName: string): Promise<Node[]>;
    getVariantFileForFolderPath(folderPath: string, variantFileName: string): Promise<Node | undefined>;
    getVariantEntityNodeForFileNode(fileNode: Node): Promise<Node[]>;
    getMotherEntitiesNode(): Promise<Node[]>;
    getImplementedClassesFromEntity(entity: Node): Promise<Node[]>;
    getMethods(entity: Node): Promise<Node<import("neo4j-driver-core/types/integer").default, {
        [key: string]: any;
    }>[]>;
    exportToJSON(): Promise<String[]>;
    exportRelationJSON(src: string): Promise<string>;
    clearNodes(): Promise<void>;
    markNodesAsBase(): Promise<void>;
    submitRequest(request: string, parameter: any): Promise<Record[]>;
}
